import {newArray} from './arrayutils';


//@@
//##import dedupSortedArr from './dedupSortedArr';
//##import hasNoDups from './hasNoDups';
//##import isSorted from './isSorted';

/**
 * converts an array to sorted set, pure function - does not modify the input
 * @param  {[string|number]} array  - the array to sorted and dedup
 * @return {[string|number]}          return a deduped sorted array
 */
export default function asSortedSet(array) {
	let arr;
	if( isSorted(array)) arr = array;
	else arr = array.slice(0).sort( (a,b) => a<b?-1:a===b?0:1);
	return  hasNoDups(arr) || dedupSortedArr(arr);
}

//@@
//## import newArray from './arrayutils/newArray';
/**
 * Creates a set (array) of numbers [start ... (end-1)]
 * @param  {[int32]} start start value
 * @param  {[int32]} end   one mare then the last value in the result array
 * @return {[Array]}         [description]
 */
export default  function range(start, end) {
	if( end === undefined) { end = start; start = 0;}
	let res = newArray(end-start);
	start = start | 0;
	for(let i=start; i<end; i++) res[i-start] = i;
	return res;
}


//@@
 
/**
 * removes all duplicates in a sorted array, pure function - does not modify the input
 * @param  {[Array]} arr assumes the array is sorted (will throw an exception if the array is not sorted)
 * @return {[Array]} returns a new array with no duplicates 
 */
export default function dedupSortedArr(arr) {
	if( arr.length === 0) return arr;
	let res = [];
	let len=arr.length-1;
	for(let i=0;i<len;i++){
		if(arr[i] > arr[i+1]) throw new Error("arr (param) is not sorted");
		if(arr[i] !== arr[i+1]){
			res.push(arr[i]);
		}
	}
	res.push(arr[len]);
	return res;
}

//@

/**
 * checks if sorted array has no dups, pure function - does not modify the input
 * @param  {[Array]}  arr - sorted set of values
 * @return {[Boolean]}     - true if the sorted array has no diplicated, false otherwise (undefined is not a sorted set)
 */
export default function hasNoDups(arr /*sorted*/) {
	if( !arr ) return false
	let len=arr.length-1;
	for(let i=0;i<len;i++){
		if(arr[i] > arr[i+1]) throw new Error("arr (param) is not sorted");
		if(arr[i]===arr[i+1]) {
			return  undefined;
		}
	}
	return arr;
}

//@@
/**
 * checks if array is sorted, pure function - does not modify the input
 * @param  {[string|number]}  arr - Array of values
 * @return {[boolean]}     - true if the array is sorted, false otherwise (undefined is not a sorted set)
 */
export default function isSorted(arr /* may not be sorted sorted*/) {
	let len=arr.length-1;
	for(let i=0;i<len;i++){
		if(arr[i]>arr[i+1]){
			return  false;
		}
	}
	return true;
}



//@@
/**
 * Show how similar two sets (sorted list) actually are
 * @param  {[Array]} sortedA [description]
 * @param  {[Array]} sortedB [description]
 * @return {[Array]}         where the array contains[same_count, different_count]
 */
export default  function similarity(sortedA, sortedB) {
	let j=0;
	let lenA = sortedA.length;
	let lenB = sortedB.length;
	let same = 0;
	for(let i =0; i< lenA && j< lenB;i++) {
		let iA = sortedA[i];
		if(iA == sortedB[j]) {
			same++;
			j++;
		} else {
			while(j<lenB && iA > sortedB[j]) j++;
					
			if( j == lenB) break;
			if(iA == sortedB[j]) {
				same++
				j++;
			}
		}
	}
	return [same, lenA+lenB-2*same];   
}

//@@
/**
 * Intersects two sorted array sets (array that issorted and has no duplicates)
 * @param  {[Array]} sortedA sorted array representing a set (no duplicated)
 * @param  {[Array]} sortedB sorted array representing a set (no duplicated)
 * @return {[Array]}         sorted array with no duplicates (a set)
 */
function _intersect2(sortedA, sortedB) {
	let res = [];
	let j=0;
	let lenA = sortedA.length;
	let lenB = sortedB.length;
	for(let i =0; i< lenA && j< lenB;i++) {
		let iA = sortedA[i];
		if(iA == sortedB[j]) {
			res.push(iA);
			j++;
		} else {
			while(j<lenB && iA > sortedB[j]) j++;
					
			if( j == lenB) return res;
			if(iA == sortedB[j]) {
				res.push(iA);
				j++;
			}
		}
	}
	return res;   
}

function _intersect3(sortedA, sortedB,sortedC) {
	let res = [];
	let j = 0;
	let k = 0;
	let lenA = sortedA.length;
	let lenB = sortedB.length;
	let lenC = sortedC.length;
	for(let i = 0; i< lenA && j< lenB&& k < lenC;i++) {
		let iA = sortedA[i];
		if(iA === sortedB[j] && iA === sortedC[k]) {
			res.push(iA);
			j++; k++;
		} else {
			while(j<lenB && iA > sortedB[j]) j++;  /* */     if( j === lenB) return res;          
			while(k<lenC && iA > sortedC[k]) k++;  /* */     if( k === lenC) return res;

			if(iA === sortedB[j] && iA === sortedC[k]) {
				res.push(iA);
				j++; k++;
			}
		}
	}
	return res;   
}


/**
 * intersection of an Array of sets, where each Set is represented as a sorted array of values (no dups)
 * @param  {[Array]} lsa Array of sets
 * @return {[Array]}     a Sorted array representing the intersection of all the sts
 */
export default  function intersectL(lsa) {
	if( !lsa || lsa.length == 0 || lsa.length == 1) return [];
	const lsaLen = lsa.length;
	if( lsaLen == 2 ) return _intersect2(lsa[0],lsa[1]);
	if( lsaLen == 3 ) return _intersect3(lsa[0],lsa[1],lsa[2]);
		
	// ix = array set and position elements, where each element [ pos-in-set, set-array]
	//let ix = lsa.map((ls) => [0,ls]);
	let ix = []; for(let i=0; i<lsaLen; i++) ix.push([0, lsa[i]]);
	//let sm = lsa.reduce( (s,l) => s.length > l.length? l : s, lsa[0]); // find shortest
		
	let sm = lsa[0]; // ugly but fast version of find the shortest set;
	for(let i=1; i<lsaLen; i++) 
		if(lsa[i].length<sm.length) sm = lsa[i]; // find tthe shortest set (sm = shortest set)
		
	let res = [];
	const smLen = sm.length;
	for(let i=0; i<smLen; i++) {
		let v = sm[i];
		//let ixLen = ix.length; 
		for(let j =0; j<lsaLen; j++) { //move all the set positions, so that elememt at 'pos'  >= sm[i]
			let [k, e] = ix[j];
			let eLen = e.length;
			while( k< eLen && e[k]< v) k++;
						
			ix[j][0] = k; // update pos in set
		}
		//let v1 = ix.reduce( (s,[j,z]) => s === z[j] ? s : undefined, v );
		//let ln = ix.length;
		// make sure all the 
		let v1 = v;
		for(let k=0; k<lsaLen; k++) {
			let [j,z] = ix[k];
			if(j < z.length && v1 !== z[j]) {
				v1 = undefined;
				break;
			}
		}
		if( v1 !== undefined ) res.push(v);

	}
	return res;
}


/*
[intersect([[0,1,2,3,5],[0,1,2,3,5,6],[0,1,2,4,5]]),
 intersect([[0,1],[0,1,2,3,5,6],[0,1,2,4,5]]),
 intersect([[0,1,2,3,5],[0,1,2,3,5,6],[4,5,7]]),
 intersect([[0,1,2,3,5,7],[0,3,5,6]])
]
*/

//@@
//##import intersectL from './intersectL';
/**
 * intersection of a list of sets (sorted arrays)
 * Intersects list sorted array sets (array that issorted and has no duplicates)
 * @param  {[Array]]} sortedL Array of sorted array representing a set (no duplicated)
 * @return {[Array]}         sorted array with no duplicates (a set)
 */
export default function intersect(sortedL/*list od sets*/) {
	return intersectL(...sortedL);
}

//@@
/**
 * maximum of a sorted array
 * @param  {[type]}
 * @return {[type]}
 */
export default function max(list) { return (!list || list.length == 0) ? undefined : list[list.length-1];}


//@@
/**
 * Union of a list of sets: assumes both sets are are represented by sorted array, and as per set definition there are no dups 
 * @param  {[Array]} lsa : array[ array{set}... ] - array{set} of sorted elements (ascending order) and no duplicated
 * @return {[set]} a new set, where result = lsa[0] ∪ lsa[1] ∪ ...
 */
export default function unionL(lsa /* array of sets */) {
	//let mx = lsa.map(l => l.length);

	if(lsa.length === 0) return [];
	if( lsa.length == 1 ) return lsa[0];
	if( lsa.length == 2 ) return _union2(lsa[0],lsa[1]);
	if( lsa.length == 3 ) return _union3(lsa[0],lsa[1],lsa[2]);
	if( lsa.length == 4 ) return _union2(_union2(lsa[0],lsa[1]),_union2(lsa[2], lsa[3]));
	if( lsa.length == 5 ) return _union3(_union2(lsa[0],lsa[1]),_union2(lsa[2], lsa[3]),lsa[4]);
	if( lsa.length == 6 ) return _union3(_union2(lsa[0],lsa[1]),_union2(lsa[2], lsa[3]),_union2(lsa[4],lsa[5]));
		
	let [first,second] = arrSplit2(lsa);
	return _union2(unionL(first), unionL(second));
}

// union of two sets
function _union2(sortedA, sortedB) {
	let lenA = sortedA.length;
	let lenB = sortedB.length;
	if( lenA === 0 ) return sortedB;
	if( lenB === 0 ) return sortedA;
		
	if( lenA === 1 && lenB === 1) {
		if(sortedA[0] === sortedB[0]) return sortedA;
	}
	else if( lenA === 1 ) return _union2(sortedB, sortedA);
	else if( lenB === 1 ) {
		let b0 = sortedB[0];
		let a0 = sortedA[0];
		if(lenA === 1 ) {
			if(a0 === b0) return sortedA;
		} else {
			if( b0 === a0 ) return sortedA;
			if( b0 === sortedA[lenA-1]) return sortedA;
		}
	}
	let res = [];
	let j=0, i=0;
	//let iA = sortedA[0];
	for(; i< lenA && j< lenB; i++) {
		let iA = sortedA[i] | 0;
		do {
			let jB = sortedB[j] | 0; 
			//console.log(iA,jB);
			if(iA > jB) {
				res.push(jB);
				j++;
				if( j >= lenB) {
					res.push(iA);
					break;
				}
			} else if( iA === jB ){
				res.push(iA); 
				j++;
				break;
			} else {
				res.push(iA);
				break;
			}
		} while( j < lenB );
	}
	while(j<lenB) res.push(sortedB[j++]);
	while(i<lenA) res.push(sortedA[i++]);
	return res;   
}



function _union3(a,b,c) {
	return _union2(_union2(a,b),c);
}


/**
 * Split an array into an array of arrays each with equal parts, expect possibly for the last element
 * @param  {[type]}
 * @return {[type]}
 */
function arrSplit2(list) {
	let len = list.length;
	let half = len >>> 1;
	return [list.slice(0,half), list.slice(len-half)];
}



//@@
/**
 * Set subtraction:  fromSet - elementsToRemove, assumes both sets are are represented by sorted array, and as per set definition there are no dups 
 * @param {[Array]} fromSet array - array(set) of sorted elements (ascending order) and no duplicated
 * @param {[Array]} elementsToRemove array(set) - array of sorted elements (ascending order) and no duplicated
 * @return {[Array]} a new set, where (∀ x ∈ fromSet), then  (x ∈ result), if and only if (x ∉ elementsToRemove).
 */
export default function subtract(fromSet,elementsToRemove) {
	let res = [];
	let j=0;
	const f_len=fromSet.length | 0;
	const r_len = elementsToRemove.length | 0;
	for(let i =0; i<f_len ;i++) {
		//console.log(i,j, ";",fromSet[i], elementsToRemove[j])
		if( j>= r_len || fromSet[i] < elementsToRemove[j]) {
			res.push(fromSet[i]);
		} else {
			while(j<r_len && fromSet[i] > elementsToRemove[j]) j++;
				
			if( j>=r_len || fromSet[i] != elementsToRemove[j] ) res.push(fromSet[i]);
			else j++;
		}
	}
	return res;   
}


//subtract([1,2,3,4],[2,3,9])  -> [1,4]  


//@@

/**
 * find the index of an element is a sorted array representing a set, uses binary search
 * @param  {[Array]} aSet          Sorted array representing a set
 * @param  {[Any]} searchElement he item to search for within the array
 * @return {[Int]}               The index of the element which defaults to -1 when not found.
 */
export default function findIndexOf(aSet, searchElement) { 
	let minIndex = 0;
	let maxIndex = aSet.length - 1;
	let currentIndex;
	let currentElement;
 	


	while (minIndex <= maxIndex) {

		currentIndex = (minIndex + maxIndex) >>> 1;
		currentElement = aSet[currentIndex];
 
		if (currentElement < searchElement) {
			minIndex = currentIndex + 1;
		}
		else if (currentElement > searchElement) {
			maxIndex = currentIndex - 1;
		}
		else {
			return currentIndex;
		}
	}
 
	return -1;
}






