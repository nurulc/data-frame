// jshint undef:true
// jshint unused:true
/*
Copyright (c) 2020, Nurul Choudhury
Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted, provided that the above
copyright notice and this permission notice appear in all copies.
THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
*/
//import {arrDedup } from '../array';
//import {toNumber} from '../utils/sort-helper';
//import isEmpty from '../utils/types/isEmpty';

//@
//##import {toNumber} from '../utils/sort-helper';
/**
 * gbSum  sum eelemnts in a group, bases on sql group by operation  
 * e.g.   'select state, quater, sum(sale_price) as sales from annual_sales groupby state, quater'
 *        in frame operation
 *        summary = frame.groupBy(['state', 'quater', gbSum('sale_price', 'sales')]);
 *        
 * @param  {[type]} name    [description]
 * @param  {[type]} newName [description]
 * @return {[type]}         [description]
 */
export default function gbSum(name,newName) {
	newName = newName || name;
	function sum(action,accum,count, val) {
		if( accum === undefined ) accum = 0;
				
		if( action !==1 ) return  [accum,count];
		else {
			let v = toNumber(val);
			return  v===undefined || isNaN(v) ?[accum,count]:[accum+v,count+1];
		}
	}
	return [sum,name,[()=>0,0],newName];
}

//@@
//##import isEmpty from '../utils/types/isEmpty';
/**
 * gbCount  count elemnts (non empty) in a group, bases on sql group by operation  
 * e.g.   'select state, quater, count(sale_price) as items_sold from annual_sales groupby state, quater'
 *        in frame operation
 *        summary = frame.groupBy(['state', 'quater', gbCount('sale_price', 'items_sold')]);
 * @param  {[type]} name    [description]
 * @param  {[type]} newName [description]
 * @return {[type]}         [description]
 */
export default function gbCount(name,newName) {
	newName = newName || name;
	function count(action,accum,count, val) {
		if( accum === undefined ) accum = 0;
		if( action !==1 ) return [count,count];
		return isEmpty(val)?[accum,count]:[accum+1,count+1];
	}
	return [count,name,[()=> 0, 0 ] ,newName];
}

//@@
//##import isEmpty from '../utils/types/isEmpty';
//##import {cmpStrNum} from '../utils/sort-helper/cmpStrNum';
/**
 * gbMin  minimum elemnts value (non empty) in a group, bases on sql group by operation  
 * e.g.   'select state, quater, product_id, min(sale_price) as min_prod_price from annual_sales groupby state, quater'
 *        in frame operation
 *        summary = frame.groupBy(['state', 'quater', 'product_id", gbMin('sale_price', 'min_prod_price')]);
 * @param  {[type]}   name    [description]
 * @param  {[type]}   newName [description]
 * @param  {Function} fn      [description]
 * @return {[type]}           [description]
 */
export default function gbMin(name,newName,fn) {
	if(fn === undefined && typeof newName === 'function') {
		fn = newName;
		newName = undefined;
	}
	newName = newName || name;
	fn = fn || minOp;
	function min(action,accum,count, val) {
		if( accum === undefined ) accum = fn(val,val);
		return (isEmpty(val) || action !== 1)?[accum,count]:[fn(val,accum)<0?val:accum,count+1];
	}
	return [min,name,[() => undefined,0],newName];
}

function minOp(a,b) { return cmpStrNum(a,b)<0?a:b; }



//@@
//##import isEmpty from '../utils/types/isEmpty';
//##import {cmpStrNum} from '../utils/sort-helper/cmpStrNum';

/**
 * gbMax max value in a group, see gbMin
 * @param  {[type]}   name    [description]
 * @param  {[type]}   newName [description]
 * @param  {Function} fn      [description]
 * @return {[type]}           [description]
 */
export default function gbMax(name,newName,fn) {
	if(fn === undefined && typeof newName === 'function') {
		fn = newName;
		newName = undefined;
	}
	newName = newName || name;
	fn = fn || maxOp;
	function max(action,accum,count, val) {
		if( accum === undefined ) accum = fn(val,val);
		return (isEmpty(val) || action !== 1)?[accum,count]:[fn(val,accum),count+1];	
	}
	return [max,name,[() => undefined,0],newName];
}
function maxOp(a,b) { return cmpStrNum(a,b)>0?a:b; }

//@@
//##import isEmpty from '../utils/types/isEmpty';
//##import {toNumber} from '../utils/sort-helper';
/**
 * gbMean average (mean) value of a group - see gbMin
 * @param  {string} name    column name to group
 * @param  {string} newName name to give to the grouping operation
 * @param  {function} fn function to test for empty value
 * @return {[type]}         [description]
 */
export default function gbMean(name,newName, fn=isEmpty) {
	newName = newName || name;
	function mean(action,accum,count, val) {
		if( accum === undefined ) accum = 0;
		if( action !== 1) return [(count>0?accum/count:undefined), count];
		let v = toNumber(val);
		return isEmpty(v) ?[accum,count]:[accum+v,count+1];
	}
	return [mean,name,[() => 0,0],newName];
}
//@@
//##import isEmpty from '../utils/types/isEmpty';
//##import {toNumber} from '../utils/sort-helper';
/**
 * gbStdDiv standard deviation - see gbMin
 * @param  {[type]} name    [description]
 * @param  {[type]} newName [description]
 * @return {[type]}         [description]
 */
export default function gbSampleStdDiv(name, newName) {
	newName = newName || name;
	function stdDiv(action,[accumSq,accum],count, val) {
		if( accum === undefined ) accum = [0,0];
		if( action === 1) {
			if(count>1) return [Math.sqrt((count*accumSq-accum*accum)/count*(count-1.0)),count];
			else return ['',0];
		}
		let v = toNumber(val);
		return isEmpty(v) ?[[accumSq,accum],count]:[[accumSq+v*v,accum+v],count++];
	}
	return [stdDiv,name,[() => [0,0],0],newName];
}

//@@
//##import isEmpty from '../utils/types/isEmpty';
//##import {toNumber} from '../utils/sort-helper';
/**
 * gbStdDiv standard deviation - see gbMin
 * @param  {[type]} name    [description]
 * @param  {[type]} newName [description]
 * @return {[type]}         [description]
 */
export default function gbStdDiv(name, newName) {
	newName = newName || name;
	function stdDiv(action,[accumSq,accum],count, val) {
		if( accum === undefined ) accum = [0,0];
		if( action === 1) {
			if(count>1) return [Math.sqrt((count*accumSq-accum*accum)/(count*count)),count];
			else return ['',0];
		}
		let v = toNumber(val);
		return isEmpty(v) ?[[accumSq,accum],count]:[[accumSq+v*v,accum+v],count++];
	}
	return [stdDiv,name,[() => [0,0],0],newName];
}
//@@
//##import isEmpty from '../utils/types/isEmpty';
//##import accStr from './accStr';

/**
 * gbMerge merge the values grouped rows onto a single comma seperated value
 * @param  {[type]} name    [description]
 * @param  {[type]} newName [description]
 * @param  {[type]} sep     [description]
 * @return {[type]}         [description]
 */
export default function gbMerge(name,newName,sep) {
	newName = newName || name;
	sep = sep || ', ';
	function merge(action,accum,count, val) {
		if( accum === undefined ) accum = [];
		if( action !== 1) return [(accum.length===1?accum[0]:accum.join(sep)), count];
		return isEmpty(val) ?[accum,count]:[accStr(accum,val),count+1];
	}
	return [merge,name,[() => [],0],newName];
}

//@@
/**
 * create a column with constant value
 * @param  {[type]} newName [description]
 * @param  {[type]} value     [description]
 * @return {[type]}         [description]
 */
export default function gbVal(newName,value) {
	newName = newName || '';
    let acc = [value,0];
	function getVal(action,accum,count) {
		if( accum === undefined ) accum = value;
		if( action !== 1 ) return acc;
		return acc;
	}
	return [getVal,undefined,[() => value,0],newName];
}

//@@
//##import isEmpty from '../utils/types/isEmpty';
//##import {arrDedup } from '../array';
//##import accStr from './accStr';
/**
 * [gbMergeU description]
 * @param  {[type]} name    [description]
 * @param  {[type]} newName [description]
 * @param  {[type]} sep     [description]
 * @return {[type]}         [description]
 */
export default function gbMergeU(name,newName,sep) {
	newName = newName || name;
	sep = sep || ', ';
	function merge(action,accum,count, val) {
		if( accum === undefined ) accum = [];
		if( action !== 1) {
			accum = accum.sort();
			accum = arrDedup(accum);
			return [(accum.length===1?accum[0]:accum.join(sep)), count];
		}
		return isEmpty(val) ?[accum,count]:[accStr(accum,val),count+1];
	}
	return [merge,name,[() => [],0],newName];
}

//@@
//##import isEmpty from '../utils/types/isEmpty';
//
//
function UNDEFINED() { return undefined; }

/**
 * Create a groupBy accumulator function, 
 * an example of the function is as follows (counts the number of non-emply cells is agroup) 
 *
 * ```
 *  function countAll(action,accum,count, val) { // example of a grouping function
 *   if( action !==1 ) return [count,count]; // compute final value for the accumulator
 *   return isEmpty(val)	?
 *   		[accum,count+1] :    			// count the empty values also (we don't use the accumulator)
 *   		[accum,count+1];				// count the number of non-empty values 
 *  }
 *
 * const gbCount = gb.make(fn);
 *
 * ```
 *
 * 
 * @param  {Function} fn      an accumilation function
 * @param  {Function} initFn  optional initialization function Default:  () => undefined
 * @param  {integer}   iniCount initial value of count Deaualt: 0
 */
export default function gbMake(fn, initFn=UNDEFINED, iniCount=0) {
  return (name,newName) => {
  newName = newName || name;
  return [fn,name,[initFn, iniCount ] ,newName];
  }
}

//we should later add gbMode (most occuring value), gbMedian (middle value)
//@@
export default function accStr(accum,val) { 
	if( val ) accum.push(val);
	return accum;
}

//@@
//##import gbStdDiv from './gbStdDiv';
//##import gbSampleStdDiv from './gbSampleStdDiv';
//##import gbMean from './gbMean';
//##import gbCount from './gbCount';
//##import gbSum from './gbSum';
//##import gbMin from './gbMin';
//##import gbMax from './gbMax';
//##import gbMerge from './gbMerge';
//##import gbVal from './gbVal';
//##import gbMergeU from './gbMergeU';
//##import gbMake from './gbMake';
export default const gb = { stdDiv: gbStdDiv, sampleStdDiv: gbSampleStdDiv, mean: gbMean, count: gbCount, 
	sum: gbSum, min: gbMin, max: gbMax, 
	merge: gbMerge, mergeU: gbMergeU, value: gbVal, make: gbMake };



