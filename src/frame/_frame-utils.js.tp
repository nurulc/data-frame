// jshint undef:true
// jshint unused:true
/*
Copyright (c) 2020, Nurul Choudhury
Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted, provided that the above
copyright notice and this permission notice appear in all copies.
THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
*/

import {Frame} from './frame';
import {dataSplit} from '../string/csv';
// import {range} from '../array';
// import getColIx from './getColIx';

//@@
//##import {Frame} from './frame';
//##import {dataSplit} from '../string/csv';
/**
 * default splitter is pipe seperated values
 * @param  {[type]} buffer    [description]
 * @param  {function} splitter    function to split a string representing a row to an array of strings
 * @param  {{ noConvert: boolen,name: string, Fr: SomeFrameClass}} options
 * @return {[type]}           [description]
 */
export default function frameFromBuffer(buffer,splitter,options={}) {
    let {Fr, name, noConvert} = options;
	Fr = Fr || Frame;
	let arr = buffer.replace(/\r/g, '').split('\n').filter(s => s);
	let columns = splitter(arr[0]);
	let array = dataSplit(arr.splice(1),splitter).filter(s => s);
	[columns, array] = cleanData(columns, array);
	var newFrame = new Fr(array,columns,name);
	if(!noConvert) newFrame = newFrame.convertData();
	return newFrame; 
}

function cleanData(columns, array) {
	if( !hasNoEmptyElem(columns) ) throw new Error("Invalid frame column");
	let n = columns.length;
	return [columns, array.map(_cleanData(n)).filter(s => s)];
}


function hasNoEmptyElem(arr, v) {
	if( arguments.length === 1 ){
		for(let i=0; i< arr.length; i++) 
			if(!arr[i]) return undefined;
	} else {
		for(let i=0; i< arr.length; i++) 
			if(arr[i] === v ) return undefined;
	}
	return arr;
}

function arrRemUndef(arr) {
	for(let i=0; i< arr.length; i++) 
		if(arr[i] === undefined) return arr.filter(v => v !== undefined);
	return arr;
}

function _cleanData(n) {
	return arr => {
		arr = arrRemUndef(arr);
		if(n !== arr.length) {
			if(n > arr.length) {
				arr = arr.slice(0);
				while(arr.length < n) arr.push('');
			} else {
	            if(n === arr.length) return arr;
				if(n < arr.length) return arr.slice(0,n);
			}
		}
		return hasNoEmptyElem(arr, undefined);
	}
}


//@@
//
//##import haveFrame from './haveFrame';
/**
 * [frameWithIndex description]
 * @param  {Frame} aFrame The frame to add the index to
 * @param  {string} indexName Name of the index column
 * @param  {boolean} atEnd if true the index is placed after the last column, otherwise it is the first column
 * @return {Frame}        new frame with an index column (remove and previous index column)
 */
export default function frameWithIndex(aFrame, indexName='_INDEX', atEnd) {
	if( ! aFrame ) return new aFrame.constructor([],[]);
	aFrame = haveFrame(aFrame);
	let cols;
	if(atEnd) 	cols = [...aFrame.columns.filter(n => n !== indexName),indexName]
	else 		cols = ['_INDEX', ...aFrame.columns.filter(n => n !== indexName)]
	return aFrame.project(cols, {[indexName]: (_,ro) => ro.__index$ });
}

//@
//##import haveFrame from './haveFrame';
//##import getColIx from './getColIx';


/**
 * [frameSum description]
 * @param  {Frme} aFrame   the frme to operate on
 * @param  {string} colName  name of the column to sum
 * @param  {function} convName optional function to convert a name to a new name
 * @param  {function} convValue optional function to conver the value
 * @return {[type]}           [description]
 */
export default function frameSum(aFrame, colName, convName, convValue) {
	aFrame = haveFrame(aFrame);
	let name = aFrame.name;
	let ix = getColIx(aFrame,colName);
	let sum = aFrame.data.reduce((s,row) => s+row[ix],0);
	let nn = ( convName  ) ? convName(name) : name;
	let nv = ( convValue ) ? convValue(sum) : sum;
	return [nn, nv];
}

//@@
//##import haveFrame from './haveFrame';
//##import getColIx from './getColIx';

/**
 * [frameCount description]
 * @param  {Frme} aFrame   [description]
 * @param  {string} colName  [description]
 * @param  {function} convName function to convert a name to a new name
 * @return {[name, count]}     a two element array with the name and count
 */
export default function frameCount(aFrame, colName, convName) {
	aFrame = haveFrame(aFrame);
	let name = aFrame.name;
	let ix = getColIx(aFrame,colName);
	
	let sum = aFrame.data.reduce((s,row) => s+(row[ix]?1:0),0);
	if( convName ) return [convName(name), sum];
	return [name, sum];
}
//@@
//## import haveFrame from './haveFrame';
//## import {range} from '../../array'
/**
 * [transpose description]
 * @param  {[type]} frame [description]
 * @param  {[type]} pivot [description]
 * @return {[type]}       [description]
 */
export default function transpose(frame, pivot) {
    frame = haveFrame(frame);
	let len = frame.length;
	let columns = frame.columns;
	let data = columns.filter(c => c !== pivot).map((c,ix) => [c, ...frame.rawColumn(c)]);
	let newColumns = (columns.indexOf(pivot) !== -1? frame.rawColumn(pivot):range(len)).map(v => ''+v);
	if(pivot && newColumns.indexOf(pivot) !== -1) pivot = undefined;
	newColumns = [(pivot?pivot:"__ROW"), ...newColumns];
	return new frame.constructor(data, newColumns, 'transpose-'+(frame.name||'frame'));
}

//@@
//## import haveFrame from './haveFrame';
/**
 * [frameToString description]
 * @param  {[type]} aFrame [description]
 * @return {[type]}        [description]
 */
export default function frameToString(aFrame) {
	aFrame = haveFrame(aFrame);
	let headers = aFrame.columns.join('\t');
	let lines = aFrame.data.map( l => l.join('\t'));
	return headers+'\n'+lines.join('\n');
}

//@@unionFrame.js

//##import haveFrame from './haveFrame';
//##import colEQ from '../array/arrEQ';
//##import colCMP from '../array/arrCMP';

// //##import getColIx from './getColIx';
// //##import {range} from '../../array';
// =============================
// tuned for frame array
// 

function isSorted(arr /* may not be sorted sorted*/) {
	let len=arr.length-1;
	for(let i=0;i<len;i++){
		if(colCMP(arr[i],arr[i+1]) > 0 ){
			return  undefined;
		}
	}
	return true;
}

function _union2(sortedA, sortedB) {
	let lenA = sortedA.length;
	let lenB = sortedB.length;
	if( lenA === 0 ) return sortedB;
	if( lenB === 0 ) return sortedA;
		
	if( lenA === 1 && lenB === 1) {
		if(colEQ(sortedA[0], sortedB[0])) return sortedA;
	}
	else if( lenA === 1 ) return _union2(sortedB, sortedA);
	else if( lenB === 1 ) {
		let b0 = sortedB[0];
		let a0 = sortedA[0];
		if(lenA === 1 ) {
			if(colEQ(a0, b0)) return sortedA;
		} else {
			if( colEQ(b0,a0) ) return sortedA;
			if( colEQ(b0, sortedA[lenA-1])) return sortedA;
		}
	}
	let res = [];
	let j=0, i=0;
	//let iA = sortedA[0];
	for(; i< lenA && j< lenB; i++) {
		let iA = sortedA[i];
		do {
			let jB = sortedB[j]; 
			//console.log(iA,jB);
			let cmpRes = colCMP(iA,jB); // compare the values
			if(/*iA > jB*/ cmpRes > 0) {
				res.push(jB);
				j++;
				if( j >= lenB) {
					res.push(iA);
					break;
				}
			} else if( /*iA === jB*/ cmpRes === 0 ){
				res.push(iA); 
				j++;
				break;
			} else {
				res.push(iA);
				break;
			}
		} while( j < lenB );
	}
	while(j<lenB) res.push(sortedB[j++]);
	while(i<lenA) res.push(sortedA[i++]);
	return res;   
}




 /**
 * assumes the frames are sorted, if notSorted is true, then the frames are sorted first;
 * requirements:
 * 1. the frames must have the same columns names
 * 2. the sorting is done in columns order
 * 3. The original fames are not modified  * @param  {[type]} frame1    [description]
  * @param  {[type]} frame1    [description]
  * @param  {[type]} frame2    [description]
  * @param  {[type]} notSorted [description]
  * @return {[type]}           [description]
  */
export default function unionFrame(frame1, frame2, notSorted) {
	frame1 = haveFrame(frame1);
	frame2 = haveFrame(frame2);
	if( !colEQ(frame1.columns, frame2.columns) ) throw new Error('frames do not have the same columns: ('+frame1.comums.join(',')+')  ('+frame2.comums.join(',')+')');
	let data1 = frame1.data, data2 = frame2.data;

	if(notSorted) {
		if(!isSorted(data1)) data1 = data1.slice(0).sort(colCMP);
		if(!isSorted(data2)) data2 = data2.slice(0).sort(colCMP);
	}
	let arr = _union2(data1, data2);
	return new frame1.constructor(arr, frame1.columns, 'union');
}
