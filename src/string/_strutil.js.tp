/*
Copyright (c) 2020, Nurul Choudhury
Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted, provided that the above
copyright notice and this permission notice appear in all copies.
THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
*/


//@@
// Bunch of str 

// String reverse, looks to be the 
// import {getLie,getCol}   from '../bundle/claimutils';

/**
 * join an array of strings ignoring empty values
 * @param  {[String]} arrOfStrings array of strings
 * @param  {String} sep          seperator string
 * @return {String}              return a string of values seperated by 'sep' string
 */
export default  function strJoin(arrOfStrings, sep='') {
	if(arrOfStrings === undefined || arrOfStrings.length === 0) return '';
	if(typeof arrOfStrings === 'string') return arrOfStrings;
	if( !Array.isArray(arrOfStrings)) throw new Error('Array of strings expected: recieved '+arrOfStrings);
	let s = '';
	let sp = '';
	for(let i=0; i< arrOfStrings.length; i++) {
		let ss = arrOfStrings[i];
		if(!ss) continue;
		s += sp; s += ss;
		sp = sep;
	}
	return s;
}

//@@
/**
 * reverse a string
 * @param  {string} s string to reverse
 * @return {string}   reversed string
 */
export default  function reverse(s) { // 1100ms
	let o = '';
	for (var i = s.length - 1; i >= 0; i--)
		o += s[i];
	return o;
}
//@@
/**
 * Find the length of the longest prefix of a and b string
 *    if a = pre + a1  and b = pre + b1
 *    pre is the longet sting that satisfies the relationship i.e.  prefixLen(a1,b1) === 0
 *    returns (pre.length )
 * @param  {string} a  first string
 * @param  {string} b  second string
 * @return {Number} length of prefix of a and b
 */
export default  function prefixLen(a,b) {
	if( a === b ) return a.length;
	let la = a.length, lb = b.length; 
	if( lb < la) la = lb;
	for(let i=0; i < la; i++) {
		if(a[i] !== a[i]) return i+ln
	}
	return la+ln;    
}
//@@
//##import prefixLen from './prefixLen';
/**
 * gets the prefix string of 'a' and 'n', for example a = 'asset', b = 'assess', the return will be 'asse'
 * @param  {string} a first string
 * @param  {string} b second
 * @return {string}   the common prefix of both a and b
 */
export default  function prefixHead(a,b) {
	return a.substr(0,prefixLen(a,b));
}

//@@
//##import prefixLen from './prefixLen';
/**
 * Gets the non-prefix string of 'a' and 'n', for example a = 'asset', b = 'assess', the return will be ['t', 'ss']
 * @param  {String} a [description]
 * @param  {String} b [description]
 * @return {[string]}   the non-common parts of  a and b, the part after the common prefix
 */
export default  function prefixTail(a,b) {
	let pre = prefixLen(a,b);
	return [a,b].map(x => x.substr(pre));
}
//@@
//##import {flatten} from '../array/flatten';
/**
 * This is rthe cross product of two arrays, where each arrys is an array of strings
 * the result is and array of length m x n, where m is the length of the first vector
 * and n is the length of the second vector
 *
 * this is like a full multiplication table where the inner operation (the multiplication) is
 * string concatination. Note if either array is a scalar string it is converted into an array
 * 
 * tring prod out, example prod(['a','b'], ['x1', 'x2']) => [ 'ax1', 'bx1', 'ax2', 'bx2' ]
 * 
 * @param  {string|[string]} s    a string or array of strings
 * @param  {[string]} list of strings
 * @return {[string]}      [description]
 */
export default  function prod(s,list) { 
	if(!Array.isArray(list)) list = list?[list]:[];
	if(Array.isArray(s)) {
		return flatten(s.map(x => prod(x,list)));
	}
	else {
		if(!s) return list.slice();
		if(list.length == 0) return [s];
		else return list.map( x => s+x);
	} 
}
//@@
/**
 * Create a FUNCTION resturns  padded (default is '0') string rep of a number
 *
 *  usage: padTo(5)(66) => '00066';
 *   or
 *         let pad3 = padTo(3,' ');
 *			pad3(5) -> '  5'
 *			pad3(45) ->  ' 45'
 *			pad3(666) -> '666'
 *          pad3(76543) -> '76543'
 *
 * @param {number} padLength
 * @param {char} padChar padding char '0' default
 * @return {function} (number) => string
 *
 */
export default  function padTo(padLength, padChar='0') {
	let maxNum = 10, 
		padding = ''; 
	for(let j=0; j<padLength; j++)
	{ 
		maxNum *= 10; 
		padding += padChar; 
	}
	maxNum--;
	return (number) => (number<=maxNum) ? (padding+number).slice(-padLength) : ''+number; 
}



//@@
/**
 * count the number of occurences of char in the string
 * @param  {string} data  [description]
 * @param  {char} char  [description]
 * @param  {[int32]} arr   optional array to place the index of char in string
 * @param  {int32} optional start start index of the string
 * @param  {int32} end   optional last index of the string
 * @return {int32}       number of occurences of the char in the string
 */
export default  function countCh(data, char, arr, start, end) {
	let i = Math.min(end || data.length, data.length);
	start = start || 0;
	let ch = char.charCodeAt(0)|0;   
	let ix = 1;
	if( arr !== undefined) {
		let end = i;
		i = start;
		arr[0] = i;
		while(i < end) 
			if(data.charCodeAt(i++) === ch) arr[ix++] = i;
	}
	else {
		while(i > start) 
			if(data.charCodeAt(--i) === ch) ix++;
	}
	return ix;
}