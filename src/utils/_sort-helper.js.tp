/*
Copyright (c) 2020, Nurul Choudhury
Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted, provided that the above
copyright notice and this permission notice appear in all copies.
THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
*/

//@@

/**
 * Convert a string to a Javascript number, thakes into accont number string with commas (,) and numbers
 * @param  {[type]} str [description]
 * @return {[type]}     [description]
 */
export function toNumber(str) {
	if(str === '' || str === undefined) return undefined;
	let len = str.length,negate = 1;
	let res = +str;
	if(!isNaN(res)) return res;
	if( res === Infinity ) return undefined;
	res = 0;
	if( str.length > 1 && (str[0] === '$'|| (str[0] ==='-' && str[1] === '$')) ) {
		let i = 1;
		if(str[1] === '-' || str[0] === '-'){
			negate = -1;
			i++;
		} 
		if( i === len ) return undefined;
		while(i<len) {
			let c = str[i];
            
			if( c === ',') { i++; continue; }
			if( c === '.') {
				let fraction = Number(str.substr(i));
				if( !isNaN(fraction)) {
					return 1.0*negate*res+fraction;
				}
				return undefined;
			}
			if(c < '0' || c > '9') return undefined;
			res = res*10+(+c);
			i++;
		}
		return res;
	} else {
		let i = 0;
		if(str[0] === -1){
			negate = -1;
			i++;
		} 
		if( i === len ) return undefined;
		while(i<len) {
			let c = str[i];
			if( c === ',') { i++; continue; }
			if( c === '.') {
				let fraction = Number(str.substr(i+1));
				if( !isNaN(fraction)) {
					return 1.0*negate*res+fraction;
				}
				return undefined;
			}
			if(c < '0' || c > '9') return undefined;
			res = res*10+(+c);
			i++;
		}
		return res;
	}
}
//@@
/**
 * Compare two strings (for sorting) 0 == euqal, -1 a<b, 1 a>b
 * @param  {string} a left string
 * @param  {string} b right string
 * @return {int32}   0 == euqal, -1 = a<b, 1 = a>b
 */
export function cmpStr(a,b) {
	if( a === b ) return 0;
	return a<b? -1 : 1;
}
//@@
//##import {cmpStr} from './cmpStr';
//##import {toNumber} from './toNumber';
const  isString = (s) =>  (typeof s) === 'string';
const  isNum = (a) =>  (typeof a) === 'number' && a !== Infinity;//isNum = (a) =>  (typeof a) === 'number';
/**
 * cmpStrNum compare (number, number), or (number, string-of-number) or (string-of-number, number) (string-of-number, string-of-number) , (string, string) 
 * @param  {string|number} a string or number, if is a string that represents a number it is treated as a number
 * @param  {string|number} b string or number, if is a string that represents a number it is treated as a number
 * @return {int32}   0 == euqal, -1 = a<b, 1 = a>b
 */
export function cmpStrNum(a,b) {
	if( isNum(a) ) {
		if( isNum(b) ) {
			return a-b;
		}
		if( isString(b) ) {
			let nb = toNumber(b);
			if( nb !== undefined ) {
				let r =  a - nb;
				if(r == 0 || isNaN(r)) return cmpStr(''+a, b);
				return r;
			}
			return cmpStr(''+a, b);
		}
	}
	else if( isNum(b) ) {
		if( isNum(b) ) return a-b;
		if( isString(b) ) {
			let na = toNumber(a);
			if( na !== undefined && na !== Infinity) {
				let r = na - b;
				if(r == 0 || isNaN(r) || r === Infinity) return cmpStr(a, ''+b);
				return r;
			}
			return cmpStr(a, ''+b);
		}	
	}
	let na = toNumber(a), nb= toNumber(b);
	//if( !isNaN(a1) && !isNaN(b1) ) return a1 - b1;
	if( na!== undefined && nb !== undefined && na !== Infinity && nb !== Infinity) {
		let r =  na - nb;
		if(r != 0 || !isNaN(r) || r !== Infinity) return r;
	}
	return cmpStr(a,b);
}
//@@
//##import {cmpStrNum} from './cmpStrNum';
/**
 * comapre string or number (used to sort frames)
 * @param  {[type]} colIX column index
 * @return {function}        (row1, row2) => compares row1[columnIX] to row2[columnIX]
 */
export default function cmpNumOrStrBy(colIX) { 
	return (row1,row2) => (cmpStrNum(row1[colIX],row2[colIX]));
}
//@@
/**
 * Reverses a sort compare function so it sorts in descending order
 * @param  {function} cmp sort comparison function
 * @return {function}      new function what will do a reverse sort
 */
export default function revCmp(cmp) { return (a,b) => cmp(b,a); }




//@@ 
/**
 * combine a set of sorting comparison functions so tht the sort presidence is maintained
 * @param  {...[type]} funcs [description]
 * @return {[type]}          [description]
 */
export default function combineCmp(...funcs) {
	let len = funcs.length;
	//funcs.find(f => (res=f(a,b))!==0); // clean but not so fast, below is fater
	switch(len){
	case 0: return () => 0;
	case 1: return funcs[0];
	case 2: return ((a,b) => funcs[0](a,b) || funcs[1](a,b));
	case 3: return ((a,b) => funcs[0](a,b) || funcs[1](a,b) || funcs[2](a,b));				
	default: 
	{
		return (
			(a,b) => 
			{
				for(let i=0; i<len; i++) {
					let res = funcs[i](a,b);
					if( res !== 0) return res;
				}
				return 0;
			});
	}
	}	
}
