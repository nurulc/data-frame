[
  {
    "name": "arrEQ",
    "filePath": "src/array/arrEQ.js",
    "lines": [
      {
        "lineNumber": 0,
        "line": "/**\r"
      },
      {
        "lineNumber": 1,
        "line": " * Tests array for equality\r"
      },
      {
        "lineNumber": 2,
        "line": " * @param  {[elements]} arr1\r"
      },
      {
        "lineNumber": 3,
        "line": " * @param  {[elements]} arr2\r"
      },
      {
        "lineNumber": 4,
        "line": " * @return {boolean}\r"
      },
      {
        "lineNumber": 5,
        "line": " */\r"
      },
      {
        "lineNumber": 6,
        "line": "export default   function arrEQ(arr1,arr2, eqFn) {\r"
      }
    ],
    "codeParams": [
      "arr1",
      "arr2",
      "eqFn"
    ],
    "docParams": [
      "arr1",
      "arr2"
    ]
  },
  {
    "name": "frameFromBuffer",
    "filePath": "src/frame/frame-utils/frameFromBuffer.js",
    "lines": [
      {
        "lineNumber": 18,
        "line": "/**"
      },
      {
        "lineNumber": 19,
        "line": " * default splitter is pipe seperated values"
      },
      {
        "lineNumber": 20,
        "line": " * @param  {[type]} buffer    [description]"
      },
      {
        "lineNumber": 21,
        "line": " * @param  {{ noConvert: boolen,name: string, Fr: SomeFrameClass}} options"
      },
      {
        "lineNumber": 22,
        "line": " * @return {[type]}           [description]"
      },
      {
        "lineNumber": 23,
        "line": " */"
      },
      {
        "lineNumber": 24,
        "line": "export default function frameFromBuffer(buffer,splitter,options={}) {"
      }
    ],
    "codeParams": [
      "buffer",
      "splitter",
      "options"
    ],
    "docParams": [
      "buffer",
      "options"
    ]
  },
  {
    "name": "frameWithIndex",
    "filePath": "src/frame/frame-utils/frameWithIndex.js",
    "lines": [
      {
        "lineNumber": 18,
        "line": "/**"
      },
      {
        "lineNumber": 19,
        "line": " * [frameWithIndex description]"
      },
      {
        "lineNumber": 20,
        "line": " * @param  {Frame} aFrame The frame to add the index to"
      },
      {
        "lineNumber": 21,
        "line": " * @return {Frame}        new frame with an index column (remove and previous index column)"
      },
      {
        "lineNumber": 22,
        "line": " */"
      },
      {
        "lineNumber": 23,
        "line": "export default function frameWithIndex(aFrame, indexName='_INDEX', atEnd) {"
      }
    ],
    "codeParams": [
      "aFrame",
      "indexName",
      "atEnd"
    ],
    "docParams": [
      "aFrame"
    ]
  },
  {
    "name": "Frame#_rowObj",
    "filePath": "src/frame/frame.js",
    "lines": [
      {
        "lineNumber": 142,
        "line": "\t/**"
      },
      {
        "lineNumber": 143,
        "line": "\t * [_rowObj description]"
      },
      {
        "lineNumber": 144,
        "line": "\t * @param  {[type]} elem [description]"
      },
      {
        "lineNumber": 145,
        "line": "\t * @return {[type]}      [description]"
      },
      {
        "lineNumber": 146,
        "line": "\t */"
      },
      {
        "lineNumber": 147,
        "line": "\t_rowObj(elem,ix) {"
      }
    ],
    "codeParams": [
      "elem",
      "ix"
    ],
    "docParams": [
      "elem"
    ]
  },
  {
    "name": "Frame#withIndex",
    "filePath": "src/frame/frame.js",
    "lines": [
      {
        "lineNumber": 151,
        "line": "\t/**"
      },
      {
        "lineNumber": 152,
        "line": "\t * [withIndex description] ()"
      },
      {
        "lineNumber": 153,
        "line": "\t * @param  {boolean} atEnd if true the index is placed on the last column, otherwise it is the first column"
      },
      {
        "lineNumber": 154,
        "line": "\t * @return {[type]} [description]"
      },
      {
        "lineNumber": 155,
        "line": "\t */"
      },
      {
        "lineNumber": 156,
        "line": "\twithIndex(indexName='_INDEX',atEnd) {"
      }
    ],
    "codeParams": [
      "indexName",
      "atEnd"
    ],
    "docParams": [
      "atEnd"
    ]
  },
  {
    "name": "Frame#project",
    "filePath": "src/frame/frame.js",
    "lines": [
      {
        "lineNumber": 294,
        "line": "\t/**"
      },
      {
        "lineNumber": 295,
        "line": "\t * "
      },
      {
        "lineNumber": 296,
        "line": "\t *   colsMapping can be a "
      },
      {
        "lineNumber": 297,
        "line": "\t *   \t\t1. rearranged list of col names from the frame e.g [ 'B', 'A', 'F']"
      },
      {
        "lineNumber": 298,
        "line": "\t *   \t\t2. or rearranged list of col names ['oldName=newName', ...] if =t of the"
      },
      {
        "lineNumber": 299,
        "line": "\t *   \t\t   = is not there the col name does not change"
      },
      {
        "lineNumber": 300,
        "line": "\t *   example of usage:"
      },
      {
        "lineNumber": 301,
        "line": "\t *   list - Frame with list.data:"
      },
      {
        "lineNumber": 302,
        "line": "\t *"
      },
      {
        "lineNumber": 303,
        "line": "\t *\t\t\t   [ [ 'jan', 'mon', 1, 2 ],"
      },
      {
        "lineNumber": 304,
        "line": "\t *\t\t\t\t [ 'jan', 'tue', 2, 6 ],"
      },
      {
        "lineNumber": 305,
        "line": "\t *\t\t\t\t [ 'jan', 'wed', 3, 4 ],"
      },
      {
        "lineNumber": 306,
        "line": "\t *\t\t\t\t [ 'jan', 'thu', undefined, 1 ],"
      },
      {
        "lineNumber": 307,
        "line": "\t *\t\t\t\t ..."
      },
      {
        "lineNumber": 308,
        "line": "\t *"
      },
      {
        "lineNumber": 309,
        "line": "\t *"
      },
      {
        "lineNumber": 310,
        "line": "\t *\t\t\t  list.columns: [ 'mon', 'weekday', 'v1', 'v2' ],"
      },
      {
        "lineNumber": 311,
        "line": "\t *"
      },
      {
        "lineNumber": 312,
        "line": "\t *\tadd column 'nurul' with value 123, change 'weekday' to uppercase, 'v1' conver undefined to 0\t\t  "
      },
      {
        "lineNumber": 313,
        "line": "\t *\t\t\t"
      },
      {
        "lineNumber": 314,
        "line": "\t *\t\t\t// Note the names if mapper are the new column names"
      },
      {
        "lineNumber": 315,
        "line": "\t *\t\t\tvar mapper = {"
      },
      {
        "lineNumber": 316,
        "line": "\t *\t\t\t\t nurul: (v, rowObj, i,row) => \"123\","
      },
      {
        "lineNumber": 317,
        "line": "\t *\t\t\t\t weekday: (v) => v.toUpperCase(),"
      },
      {
        "lineNumber": 318,
        "line": "\t *\t\t\t\t v1: (v) => v===undefined?0:v"
      },
      {
        "lineNumber": 319,
        "line": "\t *\t\t\t};"
      },
      {
        "lineNumber": 320,
        "line": "\t *"
      },
      {
        "lineNumber": 321,
        "line": "\t *\t\t\tlist.project([ 'mon', 'weekday','nurul' , 'v1', 'v2' ], mapper);"
      },
      {
        "lineNumber": 322,
        "line": "\t *"
      },
      {
        "lineNumber": 323,
        "line": "\t *\tresult:"
      },
      {
        "lineNumber": 324,
        "line": "\t *\t"
      },
      {
        "lineNumber": 325,
        "line": "\t *\t\t\t [ \t[ 'jan', 'MON', '123', 1, 2 ],"
      },
      {
        "lineNumber": 326,
        "line": "\t *\t\t\t\t[ 'jan', 'TUE', '123', 2, 6 ],"
      },
      {
        "lineNumber": 327,
        "line": "\t *\t\t\t\t[ 'jan', 'WED', '123', 3, 4 ],"
      },
      {
        "lineNumber": 328,
        "line": "\t *\t\t\t\t  'jan', 'THU', '123', 0, 1 ],"
      },
      {
        "lineNumber": 329,
        "line": "\t *\t\t\t\t..."
      },
      {
        "lineNumber": 330,
        "line": "\t *"
      },
      {
        "lineNumber": 331,
        "line": "\t *    another expample:"
      },
      {
        "lineNumber": 332,
        "line": "\t *    "
      },
      {
        "lineNumber": 333,
        "line": "\t *            // Note the use. of the now column names"
      },
      {
        "lineNumber": 334,
        "line": "\t *            var mapper1 = {"
      },
      {
        "lineNumber": 335,
        "line": "\t *\t\t\t     nurul: (v,i,row) => \"123\","
      },
      {
        "lineNumber": 336,
        "line": "\t *\t\t\t     \"Week Day\": (v) => v.toUpperCase(),"
      },
      {
        "lineNumber": 337,
        "line": "\t *\t\t\t     v1: (v) => v===undefined?0:v"
      },
      {
        "lineNumber": 338,
        "line": "\t *\t\t      }; "
      },
      {
        "lineNumber": 339,
        "line": "\t *\t\t      list.project([ 'mon=Month', 'weekday=Week Day','nurul' , 'v1', 'v2' ], mapper);\t    "
      },
      {
        "lineNumber": 340,
        "line": "\t *"
      },
      {
        "lineNumber": 341,
        "line": "\t *\tthe result is the same as the previous example, but the columns names will now be"
      },
      {
        "lineNumber": 342,
        "line": "\t *\t\t\t['Month', 'Week Day', 'nurul', 'v1', 'v2' ]"
      },
      {
        "lineNumber": 343,
        "line": "\t * "
      },
      {
        "lineNumber": 344,
        "line": "\t * [project description]"
      },
      {
        "lineNumber": 345,
        "line": "\t * @param  {[type]}  colsMapping [description]"
      },
      {
        "lineNumber": 346,
        "line": "\t * @param  {[type]}  mappingObj  [description]"
      },
      {
        "lineNumber": 347,
        "line": "\t * @param  {Boolean} flag        [description]"
      },
      {
        "lineNumber": 348,
        "line": "\t * @param  {[type]}  tester      [description]"
      },
      {
        "lineNumber": 349,
        "line": "\t * @return {[type]}              [description]"
      },
      {
        "lineNumber": 350,
        "line": "\t */"
      },
      {
        "lineNumber": 351,
        "line": "\tproject(colsMapping,mappingObj,filter=undefined,flag=false, tester=undefined) {"
      }
    ],
    "codeParams": [
      "colsMapping",
      "mappingObj",
      "filter",
      "flag",
      "tester"
    ],
    "docParams": [
      "colsMapping",
      "mappingObj",
      "flag",
      "tester"
    ]
  },
  {
    "name": "gbMean",
    "filePath": "src/frame/groupby-utils/gbMean.js",
    "lines": [
      {
        "lineNumber": 18,
        "line": "/**"
      },
      {
        "lineNumber": 19,
        "line": " * gbMean average (mean) value of a group - see gbMin"
      },
      {
        "lineNumber": 20,
        "line": " * @param  {[type]} name    [description]"
      },
      {
        "lineNumber": 21,
        "line": " * @param  {[type]} newName [description]"
      },
      {
        "lineNumber": 22,
        "line": " * @return {[type]}         [description]"
      },
      {
        "lineNumber": 23,
        "line": " */"
      },
      {
        "lineNumber": 24,
        "line": "export default function gbMean(name,newName, fn=isEmpty) {"
      }
    ],
    "codeParams": [
      "name",
      "newName",
      "fn"
    ],
    "docParams": [
      "name",
      "newName"
    ]
  },
  {
    "name": "countCh",
    "filePath": "src/string/strutil/countCh.js",
    "lines": [
      {
        "lineNumber": 16,
        "line": "/**"
      },
      {
        "lineNumber": 17,
        "line": " * count the number of occurences of char in the string"
      },
      {
        "lineNumber": 18,
        "line": " * @param  {string} data  [description]"
      },
      {
        "lineNumber": 19,
        "line": " * @param  {char} char  [description]"
      },
      {
        "lineNumber": 20,
        "line": " * @param  {[int32]} arr   optional array to place the index of char in string"
      },
      {
        "lineNumber": 21,
        "line": " * @param  {int32} optional start start index of the string"
      },
      {
        "lineNumber": 22,
        "line": " * @param  {int32} end   optional last index of the string"
      },
      {
        "lineNumber": 23,
        "line": " * @return {int32}       number of occurences of the char in the string"
      },
      {
        "lineNumber": 24,
        "line": " */"
      },
      {
        "lineNumber": 25,
        "line": "export default  function countCh(data, char, arr, start, end) {"
      }
    ],
    "codeParams": [
      "data",
      "char",
      "arr",
      "start",
      "end"
    ],
    "docParams": [
      "data",
      "char",
      "arr",
      "optional",
      "end"
    ]
  }
]